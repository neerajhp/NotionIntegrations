What is the difference between <code>System.out.print</code> and <code>System.out.println</code> ?
<code>System.out.println</code> prints a newline character at the end of each statement

{"action": "addNote", "version": 6, "params": {"note": {"deckName": "Default", "modelName": "Basic", "fields": {"Front": "What is the difference between <code>System.out.print</code> and <code>System.out.println</code> ?", "Back": "<code>System.out.println</code> prints a newline character at the end of each statement\n\n"}, "options": {"allowDuplicate": false, "duplicateScope": "deck", "duplicateScopeOptions": {"deckName": "Default", "checkChildren": false, "checkAllModels": false}}, "tags": ["JavaFundamentals"]}}}

What are the three aspects involved in the solution to a problem?
Input → Process → Output

{"action": "addNote", "version": 6, "params": {"note": {"deckName": "Default", "modelName": "Basic", "fields": {"Front": "What are the three aspects involved in the solution to a problem?", "Back": "Input \u2192 Process \u2192 Output\n\n"}, "options": {"allowDuplicate": false, "duplicateScope": "deck", "duplicateScopeOptions": {"deckName": "Default", "checkChildren": false, "checkAllModels": false}}, "tags": ["JavaFundamentals"]}}}

What is the percentage of enterprise desktops that use Java?
97%

{"action": "addNote", "version": 6, "params": {"note": {"deckName": "Default", "modelName": "Basic", "fields": {"Front": "What is the percentage of enterprise desktops that use Java?", "Back": "97%\n\n"}, "options": {"allowDuplicate": false, "duplicateScope": "deck", "duplicateScopeOptions": {"deckName": "Default", "checkChildren": false, "checkAllModels": false}}, "tags": ["JavaFundamentals"]}}}

What does the JDK provide?'
Development Tools and JRE. The JRE facilitates compilation from source code → byte code and interpreting from byte code → binary

{"action": "addNote", "version": 6, "params": {"note": {"deckName": "Default", "modelName": "Basic", "fields": {"Front": "What does the JDK provide?'", "Back": "Development Tools and JRE. The JRE facilitates compilation from source code \u2192 byte code and interpreting from byte code \u2192 binary\n\n"}, "options": {"allowDuplicate": false, "duplicateScope": "deck", "duplicateScopeOptions": {"deckName": "Default", "checkChildren": false, "checkAllModels": false}}, "tags": ["JavaFundamentals"]}}}

What are the JDK development tools?
<ul><li><b>Java compiler (javac.exe) </b>- It is the primary Java compiler. The compiler accepts Java source code and produces Java bytecode conforming to the Java Virtual Machine Specification (JVMS). Class files are created from Classes present in the source code.</li></ul>
<ul><li><b>Java launcher (java.exe)</b> - It helps in launching a Java application during execution.</li></ul>

{"action": "addNote", "version": 6, "params": {"note": {"deckName": "Default", "modelName": "Basic", "fields": {"Front": "What are the JDK development tools?", "Back": "<ul><li><b>Java compiler (javac.exe) </b>- It is the primary Java compiler. The compiler accepts Java source code and produces Java bytecode conforming to the Java Virtual Machine Specification (JVMS). Class files are created from Classes present in the source code.</li></ul>\n<ul><li><b>Java launcher (java.exe)</b> - It helps in launching a Java application during execution.</li></ul>\n\n"}, "options": {"allowDuplicate": false, "duplicateScope": "deck", "duplicateScopeOptions": {"deckName": "Default", "checkChildren": false, "checkAllModels": false}}, "tags": ["JavaFundamentals"]}}}

What is the JRE (Java Runtime Environment)?
<ul><li><b>Java Virtual Machine (JVM)</b> - It is the virtual machine that enables the computer to run Java programs.</li></ul>
<ul><li><b>Java standard library (Java Class Library</b>) - It is a set of dynamically loadable libraries that Java applications can call at run time. Java Platform is not dependent on a specific operating system and hence applications cannot rely on any of the platform-native libraries. So, the Java Platform provides a set of standard class libraries containing functions common to modern operating systems.</li></ul>

{"action": "addNote", "version": 6, "params": {"note": {"deckName": "Default", "modelName": "Basic", "fields": {"Front": "What is the JRE (Java Runtime Environment)?", "Back": "<ul><li><b>Java Virtual Machine (JVM)</b> - It is the virtual machine\u00a0that enables the\u00a0computer to run\u00a0Java\u00a0programs.</li></ul>\n<ul><li><b>Java standard library (Java Class Library</b>) -\u00a0It is a set of\u00a0dynamically loadable libraries\u00a0that\u00a0Java\u00a0applications can call at\u00a0run time. Java Platform\u00a0is not dependent on a specific\u00a0operating system and hence applications cannot rely on any of the platform-native libraries. So, the Java Platform provides a set of\u00a0standard class libraries containing functions\u00a0common to modern operating systems.</li></ul>\n\n"}, "options": {"allowDuplicate": false, "duplicateScope": "deck", "duplicateScopeOptions": {"deckName": "Default", "checkChildren": false, "checkAllModels": false}}, "tags": ["JavaFundamentals"]}}}

What are the main tools in the JVM?
<ul><li> <b>Class Loader </b>- Loads all the class files needed for execution</li></ul>
<ul><li><b>Byte Code Verifier </b>- Checks code fragments for illegal code</li></ul>
<ul><li><b>Interpreter </b>- Converts byte code instruction to machine code</li></ul>
<ul><li><b>JIT Compiler</b> - Compiles reusable byte code to machine code</li></ul>
<ul><li><b>Runtime</b> - Assists in the overall execution of the program<b> </b> </li></ul>

{"action": "addNote", "version": 6, "params": {"note": {"deckName": "Default", "modelName": "Basic", "fields": {"Front": "What are the main tools in the JVM?", "Back": "<ul><li> <b>Class Loader </b>- Loads all the class files needed for execution</li></ul>\n<ul><li><b>Byte Code Verifier </b>- Checks code fragments for illegal code</li></ul>\n<ul><li><b>Interpreter </b>- Converts byte code instruction to machine code</li></ul>\n<ul><li><b>JIT Compiler</b> - Compiles reusable byte code to machine code</li></ul>\n<ul><li><b>Runtime</b> - Assists in the overall execution of the program<b> </b> </li></ul>\n\n"}, "options": {"allowDuplicate": false, "duplicateScope": "deck", "duplicateScopeOptions": {"deckName": "Default", "checkChildren": false, "checkAllModels": false}}, "tags": ["JavaFundamentals"]}}}

Why is Java <b>Platform Independent</b>?
Does not require recompilation on different OS




{"action": "addNote", "version": 6, "params": {"note": {"deckName": "Default", "modelName": "Basic", "fields": {"Front": "Why is Java <b>Platform Independent</b>?", "Back": "Does not require recompilation on different OS\n\n\n\n\n"}, "options": {"allowDuplicate": false, "duplicateScope": "deck", "duplicateScopeOptions": {"deckName": "Default", "checkChildren": false, "checkAllModels": false}}, "tags": ["JavaFundamentals"]}}, "picture": [{"url": "https://s3.us-west-2.amazonaws.com/secure.notion-static.com/7ca8511e-7643-4914-b6fe-7264bdb4de0c/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAT73L2G45O3KS52Y5%2F20211004%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20211004T102312Z&X-Amz-Expires=3600&X-Amz-Signature=0855926fcbc7d115a56775076ff00b1b0c3f7143f3e8ddd15dcf69a266e99b7b&X-Amz-SignedHeaders=host", "filename": "Java Platform Independence.png", "fields": ["Back"]}]}

Name Six Features of Java
<ul><li>Object Oriented</li></ul>
<ul><li>Simple (High Level)</li></ul>
<ul><li>Robust (Strong type checking mechanism, Automatic Memory Management)</li></ul>
<ul><li>Architecture Neutral/ Platform Independent</li></ul>
<ul><li>Secure (Execution inside contained environment, Cannot Address data using memory address)</li></ul>
<ul><li>Multi-Threaded 
</li></ul>

{"action": "addNote", "version": 6, "params": {"note": {"deckName": "Default", "modelName": "Basic", "fields": {"Front": "Name Six Features of Java", "Back": "<ul><li>Object Oriented</li></ul>\n<ul><li>Simple (High Level)</li></ul>\n<ul><li>Robust (Strong type checking mechanism, Automatic Memory Management)</li></ul>\n<ul><li>Architecture Neutral/ Platform Independent</li></ul>\n<ul><li>Secure (Execution inside contained environment, Cannot Address data using memory address)</li></ul>\n<ul><li>Multi-Threaded \n</li></ul>\n\n"}, "options": {"allowDuplicate": false, "duplicateScope": "deck", "duplicateScopeOptions": {"deckName": "Default", "checkChildren": false, "checkAllModels": false}}, "tags": ["JavaFundamentals"]}}}

What is an identifier
A name given to a variable, method. or class to uniquely identify it
<ul><li>It can contain alphanumeric characters([a-z], [A-Z], [0-9]), dollar sign ($), underscore (_)</li></ul>
<ul><li>It should not start with a digit ([0-9])</li></ul>
<ul><li>It should not have spaces</li></ul>
<ul><li>It should not be a Java keyword</li></ul>
<ul><li>It is case-sensitive</li></ul>
<ul><li>It has no length restrictions</li></ul>

{"action": "addNote", "version": 6, "params": {"note": {"deckName": "Default", "modelName": "Basic", "fields": {"Front": "What is an identifier", "Back": "A name given to a variable, method. or class to uniquely identify it\n<ul><li>It can contain alphanumeric characters([a-z], [A-Z], [0-9]), dollar sign ($), underscore (_)</li></ul>\n<ul><li>It should not start with a digit\u00a0([0-9])</li></ul>\n<ul><li>It should not have spaces</li></ul>\n<ul><li>It should not be a Java keyword</li></ul>\n<ul><li>It is case-sensitive</li></ul>\n<ul><li>It has no length restrictions</li></ul>\n\n"}, "options": {"allowDuplicate": false, "duplicateScope": "deck", "duplicateScopeOptions": {"deckName": "Default", "checkChildren": false, "checkAllModels": false}}, "tags": ["JavaFundamentals"]}}}

What are the two types of data types in Java?
<ul><li>Primitive -  Primitive data types hold the value of the data item</li></ul>
<ul><li>Non-Primitive/Reference Data Types - Hold the reference of the memory location where the data object is stored. </li></ul>

{"action": "addNote", "version": 6, "params": {"note": {"deckName": "Default", "modelName": "Basic", "fields": {"Front": "What are the two types of data types in Java?", "Back": "<ul><li>Primitive -  Primitive data types hold the value of the data item</li></ul>\n<ul><li>Non-Primitive/Reference Data Types - Hold the reference of the memory location where the data object is stored. </li></ul>\n\n"}, "options": {"allowDuplicate": false, "duplicateScope": "deck", "duplicateScopeOptions": {"deckName": "Default", "checkChildren": false, "checkAllModels": false}}, "tags": ["JavaFundamentals"]}}}

How are long values assigned
A long values is assigned to a variable suffixed with L
<code>long salary = 500000L</code>

{"action": "addNote", "version": 6, "params": {"note": {"deckName": "Default", "modelName": "Basic", "fields": {"Front": "How are long values assigned", "Back": "A long values is assigned to a variable suffixed with L\n<code>long salary = 500000L</code>\n\n"}, "options": {"allowDuplicate": false, "duplicateScope": "deck", "duplicateScopeOptions": {"deckName": "Default", "checkChildren": false, "checkAllModels": false}}, "tags": ["JavaFundamentals"]}}}

How are float values assigned ?
A float value must be suffixed with F or f while assigning to a variable
<code>float average = 78.6f</code>

{"action": "addNote", "version": 6, "params": {"note": {"deckName": "Default", "modelName": "Basic", "fields": {"Front": "How are float values assigned ?", "Back": "A float value must be suffixed with F or f while assigning to a variable\n<code>float average = 78.6f</code>\n\n"}, "options": {"allowDuplicate": false, "duplicateScope": "deck", "duplicateScopeOptions": {"deckName": "Default", "checkChildren": false, "checkAllModels": false}}, "tags": ["JavaFundamentals"]}}}

What is the range of <code>short</code> ?
-2^15, 2^15-1

{"action": "addNote", "version": 6, "params": {"note": {"deckName": "Default", "modelName": "Basic", "fields": {"Front": "What is the range of <code>short</code> ?", "Back": "-2^15, 2^15-1\n\n"}, "options": {"allowDuplicate": false, "duplicateScope": "deck", "duplicateScopeOptions": {"deckName": "Default", "checkChildren": false, "checkAllModels": false}}, "tags": ["JavaFundamentals"]}}}

What will be the output of the following?
<code> public static void main(String args[]) {
	int age;
	System.out.println(age);
}</code>
compilation error : variable needs to be initialized before use

{"action": "addNote", "version": 6, "params": {"note": {"deckName": "Default", "modelName": "Basic", "fields": {"Front": "What will be the output of the following?\n<code> public static void main(String args[]) {\n\tint age;\n\tSystem.out.println(age);\n}</code>", "Back": "compilation error : variable needs to be initialized before use\n\n"}, "options": {"allowDuplicate": false, "duplicateScope": "deck", "duplicateScopeOptions": {"deckName": "Default", "checkChildren": false, "checkAllModels": false}}, "tags": ["JavaFundamentals"]}}}

What is the similarities and differences between <code>long</code> and <code>double</code> data types?
Both use 64bits
<code>long</code> stores whole numbers 
<code>double</code> stores fractional numbers with up to 15 decimal digits

{"action": "addNote", "version": 6, "params": {"note": {"deckName": "Default", "modelName": "Basic", "fields": {"Front": "What is the similarities and differences between <code>long</code> and <code>double</code> data types?", "Back": "Both use 64bits\n<code>long</code> stores whole numbers \n<code>double</code> stores fractional numbers with up to 15 decimal digits\n\n"}, "options": {"allowDuplicate": false, "duplicateScope": "deck", "duplicateScopeOptions": {"deckName": "Default", "checkChildren": false, "checkAllModels": false}}, "tags": ["JavaFundamentals"]}}}

What are the value of <code>public boolean var;</code> ?
<code>var = false</code>

{"action": "addNote", "version": 6, "params": {"note": {"deckName": "Default", "modelName": "Basic", "fields": {"Front": "What are the value of <code>public boolean var;</code> ?", "Back": "<code>var = false</code>\n\n"}, "options": {"allowDuplicate": false, "duplicateScope": "deck", "duplicateScopeOptions": {"deckName": "Default", "checkChildren": false, "checkAllModels": false}}, "tags": ["JavaFundamentals"]}}}

What is <b>Implicit Type Conversion/Widening</b>?
When a value of a data type with smaller range is assigned to a variable of a compatible data type with larger range.

{"action": "addNote", "version": 6, "params": {"note": {"deckName": "Default", "modelName": "Basic", "fields": {"Front": "What is <b>Implicit Type Conversion/Widening</b>?", "Back": "When a value of a data type with smaller range is assigned to a variable of a compatible data type with larger range.\n\n"}, "options": {"allowDuplicate": false, "duplicateScope": "deck", "duplicateScopeOptions": {"deckName": "Default", "checkChildren": false, "checkAllModels": false}}, "tags": ["JavaFundamentals"]}}}

What is <b>Explicit Type Conversion/Narrowing</b> ?
Explicit Conversion is used when you want to assign a value of larger range data type to a smaller range data type. Not performed during compilation. <b>Must be typecasted. </b>


{"action": "addNote", "version": 6, "params": {"note": {"deckName": "Default", "modelName": "Basic", "fields": {"Front": "What is <b>Explicit Type Conversion/Narrowing</b> ?", "Back": "Explicit Conversion is used when you want to assign a value of larger range data type to a smaller range data type. Not performed during compilation. <b>Must be typecasted. </b>\n\n\n"}, "options": {"allowDuplicate": false, "duplicateScope": "deck", "duplicateScopeOptions": {"deckName": "Default", "checkChildren": false, "checkAllModels": false}}, "tags": ["JavaFundamentals"]}}}

When does type conversion occur?
During compilation. 


{"action": "addNote", "version": 6, "params": {"note": {"deckName": "Default", "modelName": "Basic", "fields": {"Front": "When does type conversion occur?", "Back": "During compilation. \n\n\n"}, "options": {"allowDuplicate": false, "duplicateScope": "deck", "duplicateScopeOptions": {"deckName": "Default", "checkChildren": false, "checkAllModels": false}}, "tags": ["JavaFundamentals"]}}, "picture": [{"url": "https://s3.us-west-2.amazonaws.com/secure.notion-static.com/425d0127-f7d5-4624-8b09-548330dfb0da/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAT73L2G45O3KS52Y5%2F20211004%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20211004T102326Z&X-Amz-Expires=3600&X-Amz-Signature=e3eb4a477529643fed843417c4d251590b77bbfc36c4591dfeb6042d65e85b1a&X-Amz-SignedHeaders=host", "filename": "Type Conversion Sequence.png", "fields": ["Back"]}]}

What are the unary operators?


{"action": "addNote", "version": 6, "params": {"note": {"deckName": "Default", "modelName": "Basic", "fields": {"Front": "What are the unary operators?", "Back": "\n\n"}, "options": {"allowDuplicate": false, "duplicateScope": "deck", "duplicateScopeOptions": {"deckName": "Default", "checkChildren": false, "checkAllModels": false}}, "tags": ["JavaFundamentals"]}}, "picture": [{"url": "https://s3.us-west-2.amazonaws.com/secure.notion-static.com/67c21418-98ef-4fc2-b961-ff4a91e892fc/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAT73L2G45O3KS52Y5%2F20211004%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20211004T102327Z&X-Amz-Expires=3600&X-Amz-Signature=8bd0dba041aa4a389ea9b767063c9e59313878560bcf735bec1a2daaaa7197e9&X-Amz-SignedHeaders=host", "filename": "Unary Operators.png", "fields": ["Back"]}]}

What is filled in voids when left shifting?
0


{"action": "addNote", "version": 6, "params": {"note": {"deckName": "Default", "modelName": "Basic", "fields": {"Front": "What is filled in voids when left shifting?", "Back": "0\n\n\n"}, "options": {"allowDuplicate": false, "duplicateScope": "deck", "duplicateScopeOptions": {"deckName": "Default", "checkChildren": false, "checkAllModels": false}}, "tags": ["JavaFundamentals"]}}}

What is filled in voids when signed right shifting?
0 if first operand is positive. Otherwise 1

{"action": "addNote", "version": 6, "params": {"note": {"deckName": "Default", "modelName": "Basic", "fields": {"Front": "What is filled in voids when signed right shifting?", "Back": "0 if first operand is positive. Otherwise 1\n\n"}, "options": {"allowDuplicate": false, "duplicateScope": "deck", "duplicateScopeOptions": {"deckName": "Default", "checkChildren": false, "checkAllModels": false}}, "tags": ["JavaFundamentals"]}}}

What is filled in voids when unsigned right shifting (>>>) ?
0

{"action": "addNote", "version": 6, "params": {"note": {"deckName": "Default", "modelName": "Basic", "fields": {"Front": "What is filled in voids when unsigned right shifting (>>>) ?", "Back": "0\n\n"}, "options": {"allowDuplicate": false, "duplicateScope": "deck", "duplicateScopeOptions": {"deckName": "Default", "checkChildren": false, "checkAllModels": false}}, "tags": ["JavaFundamentals"]}}}

What datatypes are supported by <code>switch</code> ?
<code>char </code>and <code>int</code>

{"action": "addNote", "version": 6, "params": {"note": {"deckName": "Default", "modelName": "Basic", "fields": {"Front": "What datatypes are supported by <code>switch</code> ?", "Back": "<code>char </code>and <code>int</code>\n\n"}, "options": {"allowDuplicate": false, "duplicateScope": "deck", "duplicateScopeOptions": {"deckName": "Default", "checkChildren": false, "checkAllModels": false}}, "tags": ["JavaFundamentals"]}}}

When do you use <code>continue</code> ?
<code>continue </code>is used to skip the current iteration of a loop and continue with the next iteration


{"action": "addNote", "version": 6, "params": {"note": {"deckName": "Default", "modelName": "Basic", "fields": {"Front": "When do you use <code>continue</code> ?", "Back": "<code>continue </code>is used to skip the current iteration of a loop and continue with the next iteration\n\n\n"}, "options": {"allowDuplicate": false, "duplicateScope": "deck", "duplicateScopeOptions": {"deckName": "Default", "checkChildren": false, "checkAllModels": false}}, "tags": ["JavaFundamentals"]}}}

What is Object Oriented Programming? 
A programming paradigm that enables programmers to create representations of real life entities in the form of <b>classes</b> and <b>objects</b>. It is used to structure a program into simple, reusable pieces of code.

{"action": "addNote", "version": 6, "params": {"note": {"deckName": "Default", "modelName": "Basic", "fields": {"Front": "What is Object Oriented Programming? ", "Back": "A programming paradigm that enables programmers to create representations of real life entities in the form of <b>classes</b> and <b>objects</b>. It is used to structure a program into simple, reusable pieces of code.\n\n"}, "options": {"allowDuplicate": false, "duplicateScope": "deck", "duplicateScopeOptions": {"deckName": "Default", "checkChildren": false, "checkAllModels": false}}, "tags": ["JavaFundamentals"]}}}

What are the advantages of Object Oriented Programming? 
<ul><li><b>Modularity</b>: OOP enables programmers to create modules that do not need to be changed when an object is added.</li></ul>
<ul><li><b>Scalability</b>: OOP makes development and maintenance easier.</li></ul>
<ul><li><b>Data hiding</b>: OOP provides hiding and securing data.</li></ul>
<ul><li><b>Real life scenario</b>: OOP provides ability to simulate real world event more effectively and efficiently.</li></ul>

{"action": "addNote", "version": 6, "params": {"note": {"deckName": "Default", "modelName": "Basic", "fields": {"Front": "What are the advantages of Object Oriented Programming? ", "Back": "<ul><li><b>Modularity</b>: OOP enables programmers to create\u00a0modules\u00a0that do not need to be changed when an object is added.</li></ul>\n<ul><li><b>Scalability</b>: OOP makes development and maintenance easier.</li></ul>\n<ul><li><b>Data hiding</b>: OOP provides hiding and securing data.</li></ul>\n<ul><li><b>Real life scenario</b>: OOP provides ability to simulate real world event\u00a0more effectively and efficiently.</li></ul>\n\n"}, "options": {"allowDuplicate": false, "duplicateScope": "deck", "duplicateScopeOptions": {"deckName": "Default", "checkChildren": false, "checkAllModels": false}}, "tags": ["JavaFundamentals"]}}}

What is a <code>class</code>?
A representation specifying the characteristics and behaviors of a real life entity. The class determines the attributes and behaviors which an object should possess to belong to the class.

{"action": "addNote", "version": 6, "params": {"note": {"deckName": "Default", "modelName": "Basic", "fields": {"Front": "What is a <code>class</code>?", "Back": "A representation specifying the characteristics and behaviors of a real life entity. The class determines the attributes and behaviors which an object should possess to belong to the class.\n\n"}, "options": {"allowDuplicate": false, "duplicateScope": "deck", "duplicateScopeOptions": {"deckName": "Default", "checkChildren": false, "checkAllModels": false}}, "tags": ["JavaFundamentals"]}}}

What is an <code>object</code> ?
An instance of a class with attributes and behaviors. Objects are created using <code>new</code>

{"action": "addNote", "version": 6, "params": {"note": {"deckName": "Default", "modelName": "Basic", "fields": {"Front": "What is an <code>object</code> ?", "Back": "An instance of a class with attributes and behaviors. Objects are created using <code>new</code>\n\n"}, "options": {"allowDuplicate": false, "duplicateScope": "deck", "duplicateScopeOptions": {"deckName": "Default", "checkChildren": false, "checkAllModels": false}}, "tags": ["JavaFundamentals"]}}}

What is an instance variable?
Instance variables are declared within a class and are used for storing values of objects.


{"action": "addNote", "version": 6, "params": {"note": {"deckName": "Default", "modelName": "Basic", "fields": {"Front": "What is an instance variable?", "Back": "Instance variables are declared within a class and are used for storing values of objects.\n\n\n"}, "options": {"allowDuplicate": false, "duplicateScope": "deck", "duplicateScopeOptions": {"deckName": "Default", "checkChildren": false, "checkAllModels": false}}, "tags": ["JavaFundamentals"]}}}

How are primitive data types passed as parameters?
<b>Pass by Value</b>. The values are copied from the actual parameters to the formal parameters. <b>Actual </b>and <b>Formal</b> parameters point to different memory locations.

{"action": "addNote", "version": 6, "params": {"note": {"deckName": "Default", "modelName": "Basic", "fields": {"Front": "How are primitive data types passed as parameters?", "Back": "<b>Pass by Value</b>. The values are copied from the actual parameters to the formal parameters. <b>Actual </b>and <b>Formal</b> parameters point to different memory locations.\n\n"}, "options": {"allowDuplicate": false, "duplicateScope": "deck", "duplicateScopeOptions": {"deckName": "Default", "checkChildren": false, "checkAllModels": false}}, "tags": ["JavaFundamentals"]}}}

How are objects passed as parameters?
<b>Pass by Reference</b>. The formal and actual parameters both refer to the same object and same memory location.

{"action": "addNote", "version": 6, "params": {"note": {"deckName": "Default", "modelName": "Basic", "fields": {"Front": "How are objects passed as parameters?", "Back": "<b>Pass by Reference</b>. The formal and actual parameters both refer to the same object and same memory location.\n\n"}, "options": {"allowDuplicate": false, "duplicateScope": "deck", "duplicateScopeOptions": {"deckName": "Default", "checkChildren": false, "checkAllModels": false}}, "tags": ["JavaFundamentals"]}}}

What is the <b>this</b> keyword used for ?
In Java, <b>this</b>, is a reference variable that refers to the current object

{"action": "addNote", "version": 6, "params": {"note": {"deckName": "Default", "modelName": "Basic", "fields": {"Front": "What is the <b>this</b> keyword used for ?", "Back": "In Java, <b>this</b>, is a reference variable that refers to the current object\n\n"}, "options": {"allowDuplicate": false, "duplicateScope": "deck", "duplicateScopeOptions": {"deckName": "Default", "checkChildren": false, "checkAllModels": false}}, "tags": ["JavaFundamentals"]}}}

What is the Java Garbage Collector
Blah

{"action": "addNote", "version": 6, "params": {"note": {"deckName": "Default", "modelName": "Basic", "fields": {"Front": "What is the Java Garbage Collector", "Back": "Blah\n\n"}, "options": {"allowDuplicate": false, "duplicateScope": "deck", "duplicateScopeOptions": {"deckName": "Default", "checkChildren": false, "checkAllModels": false}}, "tags": ["JavaFundamentals"]}}}

This is a test for a new card
Its Worked!.

{"action": "addNote", "version": 6, "params": {"note": {"deckName": "Default", "modelName": "Basic", "fields": {"Front": "This is a test for a new card", "Back": "Its Worked!.\n\n"}, "options": {"allowDuplicate": false, "duplicateScope": "deck", "duplicateScopeOptions": {"deckName": "Default", "checkChildren": false, "checkAllModels": false}}, "tags": ["JavaFundamentals"]}}}

This is the second test card
Please work

{"action": "addNote", "version": 6, "params": {"note": {"deckName": "Default", "modelName": "Basic", "fields": {"Front": "This is the second test card", "Back": "Please work\n\n"}, "options": {"allowDuplicate": false, "duplicateScope": "deck", "duplicateScopeOptions": {"deckName": "Default", "checkChildren": false, "checkAllModels": false}}, "tags": ["JavaFundamentals"]}}}

